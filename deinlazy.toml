[[plugins]]
repo = 'Shougo/context_filetype.vim'

#html
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['css', 'html', 'xhtml', 'php']
hook_source = '''
    let g:user_emmet_mode = 'nv'
    let g:user_emmet_settings = {
        \ 'variables': {
        \ 'lang' : 'ja'
        \}
        \}
'''

#lsp
[[plugins]]
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
on_if = 'has("nvim")'
hook_source = '''
    set hidden
    "document symbolsは無効
    nmap <silent> <Space>l[ <Plug>(coc-definition)
    nmap <silent> <Space>l] <Plug>(coc-references)
    nmap <silent> <Space>lf <Plug>(coc-format)
    nmap <silent> <Space>lr <Plug>(coc-rename)
    "nmap <silent> <Space>lt <Plug>(coc-type-definition)
    nmap <silent> <Space>lj <Plug>(coc-diagnostic-next)
    nmap <silent> <Space>lk <Plug>(coc-diagnostic-prev)
    vmap <silent> <Space>lf <Plug>(coc-format-selected)

    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    inoremap <silent><expr> <C-n>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "" :
      \ coc#refresh()

'''

[[plugins]]
repo = 'gregsexton/MatchTag'
on_ft = ['html', 'xhtml']

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_source='''
    let g:indent_guides_enable_on_vim_startup = 1
'''

[[plugins]]
repo = 'SirVer/ultisnips'
on_event = 'InsertEnter'
hook_add = '''
       let  g:UltiSnipsExpandTrigger = "<C-t>" 
       let  g:UltiSnipsJumpForwardTrigger = "<C-j>"
       let  g:UltiSnipsJumpBackwardTrigger= "<C-k>"
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_source = '''
  "nerdtreeは範囲指定の数字不要なのでC-u不要
  nnoremap <silent> [nerd]o :NERDTree<CR>
'''


[[plugins]]
repo = 'Shougo/denite.nvim'
hook_source='''
    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
	  nnoremap <silent><buffer><expr> <CR>
	  \ denite#do_map('do_action')
	  nnoremap <silent><buffer><expr> v
	  \ denite#do_map('do_action', 'vsplit')
	  nnoremap <silent><buffer><expr> s
	  \ denite#do_map('do_action', 'split')
	  nnoremap <silent><buffer><expr> d
	  \ denite#do_map('do_action', 'delete')
	  nnoremap <silent><buffer><expr> p
	  \ denite#do_map('do_action', 'preview')
	  nnoremap <silent><buffer><expr> q
	  \ denite#do_map('quit')
	  nnoremap <silent><buffer><expr> i
	  \ denite#do_map('open_filter_buffer')
	  nnoremap <silent><buffer><expr> <Space>
	  \ denite#do_map('toggle_select').'j'
	endfunction
    autocmd FileType denite call denite_settings#my_settings()

'''
hook_add='''
    nnoremap <silent> [denite]g :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>
    nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
    nnoremap <silent> [denite]n :<C-u>Denite -resume -buffer-name=search-buffer-denite -cursor-pos=+1 -immediately<CR>
    nnoremap <silent> [denite]p :<C-u>Denite -resume -buffer-name=search-buffer-denite -cursor-pos=-1 -immediately<CR>
    nnoremap <silent> [denite]f :<C-u>Denite file/rec -start-filter<CR>
    nnoremap <silent> [denite]p :<C-u>DeniteProjectDir file/rec -start-filter<CR>
    nnoremap <silent> [denite]b :<C-u>Denite buffer -start-filter<CR>

'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_source='''
    autocmd FileType defx call defx_settings#my_settings()
'''

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown']
hook_source = '''
'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown']
build = 'cd app & yarn install'
hook_source = '''
    nnoremap [markdownpreview]s :MarkdownPreview<CR>
    nnoremap [markdownpreview]q :MarkdownPreviewStop<CR>
'''

